[{"title":"hexo在github部署博客的基本过程","url":"/2021/08/01/HEXO%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/","content":"<p>​    <b>前言</b>：主要记录了自己利用hexo搭建一个基本静态博客的方法，以及对首次yilia主题的尝试</p>\n<span id=\"more\"></span>\n\n<hr>\n<h4 id=\"关于侧边栏标签如何添加标签\"><a href=\"#关于侧边栏标签如何添加标签\" class=\"headerlink\" title=\"关于侧边栏标签如何添加标签\"></a>关于侧边栏标签如何添加标签</h4><blockquote>\n<p><a href=\"https://www.cnblogs.com/zzw1024/p/12051995.html\">参考链接</a></p>\n</blockquote>\n<ul>\n<li><p>只用前三步即可创建一个标签（例如：分类）</p>\n</li>\n<li><p>注意修改<span style='background:yellow'>\\themes\\yilia_config.yml</span>时的书写方式</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"string\">主页:</span> <span class=\"string\">/</span></span><br><span class=\"line\">  <span class=\"comment\">#随笔: /tags/随笔/</span></span><br><span class=\"line\">  <span class=\"string\">分类:</span> <span class=\"string\">/categories/</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"more语句截断改善，以及如何给文章添加多标签\"><a href=\"#more语句截断改善，以及如何给文章添加多标签\" class=\"headerlink\" title=\"more语句截断改善，以及如何给文章添加多标签\"></a>more语句截断改善，以及如何给文章添加多标签</h4><blockquote>\n<p><a href=\"https://www.freesion.com/article/1931619786/\">参考链接</a></p>\n</blockquote>\n<h4 id=\"hexo基本博客的搭建以及如何在github部署\"><a href=\"#hexo基本博客的搭建以及如何在github部署\" class=\"headerlink\" title=\"hexo基本博客的搭建以及如何在github部署\"></a>hexo基本博客的搭建以及如何在github部署</h4><ol>\n<li><p>下载安装nodejs</p>\n</li>\n<li><p>安装git</p>\n</li>\n<li><p>安装镜像源</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#打开git,输入指令安装镜像源，cnpm,提高速度</span><br><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class=\"line\">#可以输入 cnpm -v 检验</span><br></pre></td></tr></table></figure></li>\n<li><p>全局安装hexo</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cnpm install -g hexo-cli</span><br><span class=\"line\">#可以输入 hexo -v 验证</span><br></pre></td></tr></table></figure></li>\n<li><p>选择一个磁盘建立Blog文件夹（文件夹名字任意）</p>\n<blockquote>\n<p>如果后期搭建或者配置博客出错,可以删除Blog文件夹和第八步中的<code>.ssl</code>文件夹，从这一步重新开始搭建</p>\n</blockquote>\n</li>\n<li><p>在Blog文件夹下右键git bash here</p>\n</li>\n<li><p>hexo初始化博客</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#输入命令初始化博客</span><br><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>此时输入命令hexo s ，就可以通过生成的<a href=\"http://localhost:4000访问基于本地的博客网页\">http://localhost:4000访问基于本地的博客网页</a></p>\n</blockquote>\n</li>\n<li><p>部署博客到github的准备</p>\n<ol>\n<li><p>github新建仓库，命名为yourname.github.io(yourname是你的github名)</p>\n</li>\n<li><p>安装git部署插件（仍旧在Blog目录下进行）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure></li>\n<li><p>记事本打开并修改Blog根目录下的_config.yml中的deploy,如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#除了中文，其余都用英文输入（包括冒号）</span><br><span class=\"line\"></span><br><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: git@github.com:GitHub用户名/GitHub用户名.github.io.git   </span><br><span class=\"line\">  branch: main   #github最新为main，而不是原来的master</span><br></pre></td></tr></table></figure></li>\n<li><p>回到git bash,生成SSL添加到github</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#先让github知道你是谁</span><br><span class=\"line\">git config --global user.name &quot;yourname&quot;  #github用户名</span><br><span class=\"line\">git config --global user.email &quot;youremail&quot;  #github注册邮箱</span><br><span class=\"line\"></span><br><span class=\"line\">#生成SSH，默认生成在C:\\Users\\username\\.ssh文件夹下</span><br><span class=\"line\">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br><span class=\"line\">#输入命令后需要连按三次enter</span><br></pre></td></tr></table></figure>\n\n<p>ssh，简单来讲，就是一个秘钥，其中，id_rsa.pub是公共秘钥，把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p>\n<p>而后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key<br>把你的id_rsa.pub里面的信息复制进去。</p>\n</li>\n</ol>\n</li>\n<li><p>回到git bar</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#部署到github</span><br><span class=\"line\">hexo d</span><br><span class=\"line\">#现在浏览器就可以访问啦（github注册名.github.io）</span><br></pre></td></tr></table></figure></li>\n<li><p>剩下的就是选择主题和美化的事情了</p>\n</li>\n</ol>\n<blockquote>\n<p>参考链接</p>\n<p><a href=\"https://blog.csdn.net/sinat_37781304/article/details/82729029\">CSDN</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1Yb411a7ty?from=search&seid=11345417621504747834\">bilibili</a></p>\n<p><a href=\"https://www.zhihu.com/question/38219432?sort=created\">知乎</a></p>\n</blockquote>\n<h4 id=\"主题安装及配置\"><a href=\"#主题安装及配置\" class=\"headerlink\" title=\"主题安装及配置\"></a>主题安装及配置</h4><ol>\n<li><h6 id=\"yilia主题安装\"><a href=\"#yilia主题安装\" class=\"headerlink\" title=\"yilia主题安装\"></a>yilia主题安装</h6><ol>\n<li><p>Blog根目录下执行安装指令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone git://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br></pre></td></tr></table></figure></li>\n<li><p>修改Blog根目录下_config.yml文件_</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Extensions</span><br><span class=\"line\">## Plugins: https://hexo.io/plugins/</span><br><span class=\"line\">## Themes: https://hexo.io/themes/</span><br><span class=\"line\">theme: yilia  #这里修改为yilia</span><br></pre></td></tr></table></figure></li>\n<li><p>回到git bash,输入以下指令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo clean  #清除多余缓存</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo s      #(可选项)用以生成本地预览，地址http://localhost:4000</span><br><span class=\"line\">hexo d\t\t#部署到github,完成后浏览器查看实际效果</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p>头像、网站图标等添加</p>\n<blockquote>\n<p><a href=\"https://www.freesion.com/article/1736594755/\">参考链接</a></p>\n</blockquote>\n</li>\n<li><p>侧边栏作者和名言不显示问题（侧边栏背景的解决方案我没找相关修改项）</p>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/m0_51078229/article/details/110943313\">参考链接</a></p>\n</blockquote>\n</li>\n<li><p>这个主题截止于此吧，我出错了，找不到问题</p>\n</li>\n</ol>\n","categories":["Hexo博客"],"tags":["Hexo"]},{"title":"Hexo多层级嵌套页面方法","url":"/2021/08/03/hexo%E5%B5%8C%E5%A5%97%E9%A1%B5%E9%9D%A2/","content":"<p><b>前言</b>：关于嵌套页面的实现方法，官方文档和百度上都没有讲的很明白，通过自己摸索总结出这一方法</p>\n<span id=\"more\"></span>\n\n<hr>\n<h5 id=\"1-在站点配置文件的menu中加入以下内容\"><a href=\"#1-在站点配置文件的menu中加入以下内容\" class=\"headerlink\" title=\"1.在站点配置文件的menu中加入以下内容\"></a>1.在站点配置文件的<code>menu</code>中加入以下内容</h5><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-home</span></span><br><span class=\"line\">  <span class=\"attr\">Hexo:</span></span><br><span class=\"line\">    <span class=\"attr\">default:</span> <span class=\"string\">/hexo/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-folder-open</span>\t<span class=\"comment\">#一级页面</span></span><br><span class=\"line\">    <span class=\"attr\">next:</span></span><br><span class=\"line\">        <span class=\"attr\">default:</span> <span class=\"string\">/next/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-sticky-note</span>\t<span class=\"comment\">#二级页面</span></span><br><span class=\"line\">        <span class=\"attr\">Nested_pages:</span> <span class=\"string\">/nested_pages.html</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-file</span>\t<span class=\"comment\">#三级页面，建议建立三级即可，过多会影响搜索引擎的收录</span></span><br></pre></td></tr></table></figure>\n\n<p>每一个<code>default</code>对应一个页面，我这里模仿官方文档的写法，因此<code>Nested_pages</code>的目标链接为<span style='background:yellow'><b>.html</b></span></p>\n<p><code>||</code>前面是目标链接，指向内容由自己编写，<code>||</code>后面是自定义图标，在<a href=\"https://fontawesome.dashgame.com/\">Font Awesome</a>这个网站复制想要的图标名称进行替换就行了</p>\n<h5 id=\"2-生成对应文件\"><a href=\"#2-生成对应文件\" class=\"headerlink\" title=\"2.生成对应文件\"></a>2.生成对应文件</h5><p>根目录下右键打开git bash,新建3个层级页面对应的文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">hexo</span> <span class=\"string\">new</span> <span class=\"string\">page</span> <span class=\"string\">hexo</span></span><br><span class=\"line\"><span class=\"string\">hexo</span> <span class=\"string\">new</span> <span class=\"string\">page</span> <span class=\"string\">next</span></span><br><span class=\"line\"><span class=\"string\">hexo</span> <span class=\"string\">new</span> <span class=\"string\">page</span> <span class=\"string\">nested_pages</span></span><br></pre></td></tr></table></figure>\n\n<p>生成的文件会分别以名为<span style='background:yellow'>hexo, next, nested_pages</span>的三个文件夹的形式存在根目录下的<code>source</code>文件夹中</p>\n<h5 id=\"2-设置文件层级结构\"><a href=\"#2-设置文件层级结构\" class=\"headerlink\" title=\"2.设置文件层级结构\"></a>2.设置文件层级结构</h5><p>先将nested_pages文件夹下的<span style='color:文字颜色;background:yellow;font-size:文字大小;font-family:字体;'>index.md</span>文件重命名为<span style='color:文字颜色;background:yellow;font-size:文字大小;font-family:字体;'>nested_pages.md</span></p>\n<p>打开根目录下<code>source</code>文件夹，将nested_pages文件夹中的<span style='background:yellow'>index.md</span>文件移到next文件夹中，再将next文件夹移到hexo文件夹中，最终的层级目录如下:</p>\n<p><img src=\"/../images/hexo%E5%B5%8C%E5%A5%97%E9%A1%B5%E9%9D%A2/%E7%9B%AE%E5%BD%95%E5%B1%82%E7%BA%A7.png\" alt=\"目录层级\"></p>\n<h5 id=\"3-简单编写一下各个层级页面的内容\"><a href=\"#3-简单编写一下各个层级页面的内容\" class=\"headerlink\" title=\"3.简单编写一下各个层级页面的内容\"></a>3.简单编写一下各个层级页面的内容</h5><p>下面是我为了测试和区分编写的内容</p>\n<p>hexo文件夹下的index.md文件：</p>\n<p><img src=\"/../images/hexo%E5%B5%8C%E5%A5%97%E9%A1%B5%E9%9D%A2/hexo_index.png\" alt=\"hexo_index\"></p>\n<p>next文件夹下的index.md文件</p>\n<p><img src=\"/../images/hexo%E5%B5%8C%E5%A5%97%E9%A1%B5%E9%9D%A2/next_index.png\" alt=\"next_index\"></p>\n<p>已经移动到next的nested_pages.md文件</p>\n<p><img src=\"/../images/hexo%E5%B5%8C%E5%A5%97%E9%A1%B5%E9%9D%A2/nested_pages.png\" alt=\"nested_pages\"></p>\n<h5 id=\"4-使用中文显示\"><a href=\"#4-使用中文显示\" class=\"headerlink\" title=\"4.使用中文显示\"></a>4.使用中文显示</h5><p>在<code>themes/next/languages/zh-CN</code>中的<code>menu</code>选项加入翻译</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Netsed_pages: 嵌套页面</span><br></pre></td></tr></table></figure>\n\n<p>之后就可以在不同层级的页面是继续奋“键”疾书啦</p>\n<h5 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5.总结\"></a>5.总结</h5><p>嵌套页面创建后的编写不同于<code>hexo n &quot;文章名称&quot;</code>，后者可以为文章添加标签和分类属性，包括<code>&lt;!--more--&gt;</code>的使用，嵌套页面内编写的文章添加不了这些属性，目前检测还不能使用<code>&lt;!--more--&gt;</code>,这是我比较不满足的地方</p>\n<p>所以建议next主题的嵌套页面用来写专栏类的文章，例如文章最后链接官方的做法</p>\n<p>我认为应该有解决办法，但是奈何技术不到家，网上又苦寻无果，只能留待来日在解决了</p>\n<p>最后提醒大家如果要删除嵌套页面，除了修改回<code>menu</code>外，文件夹应该从低层级向高层级依次删除，如先删除next文件夹下内容，再删除hexo文件夹下内容，最后删除hexo文件夹，否则系统会提示要管理员权限，然后各种操作都无法删除</p>\n<h5 id=\"6-参考链接\"><a href=\"#6-参考链接\" class=\"headerlink\" title=\"6.参考链接\"></a>6.参考链接</h5><blockquote>\n<p><a href=\"https://theme-next.js.org/docs/getting-started/\">Getting Started | NexT</a></p>\n</blockquote>\n","categories":["Hexo博客"],"tags":["Hexo"]},{"title":"Hexo博客配置next主题","url":"/2021/08/02/next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/","content":"<p><strong>前言</strong>：搭建好hexo博客后，配置next主题的经验记录</p>\n<span id=\"more\"></span>\n\n<hr>\n<h3 id=\"1-安装NexT\"><a href=\"#1-安装NexT\" class=\"headerlink\" title=\"1.安装NexT\"></a>1.安装NexT</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#Blog根目录下git clone</span><br><span class=\"line\">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-启用主题\"><a href=\"#2-启用主题\" class=\"headerlink\" title=\"2.启用主题\"></a>2.启用主题</h3><p>在Blog根目录下打开<span style='color:文字颜色;background:yellow;font-size:文字大小;font-family:字体;'>_config.yml</span>文件，找到<code>theme</code>字段，修改其值为<code>next</code></p>\n<blockquote>\n<p>之后Blog根目录下的_cofig.yml称为<span style='color:文字颜色;background:yellow;font-size:文字大小;font-family:字体;'>站点配置文件</span>，themes/next/_config,yml称为是<span style='color:文字颜色;background:yellow;font-size:文字大小;font-family:字体;'>主题配置文件</span></p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">theme: next</span><br></pre></td></tr></table></figure>\n\n<p>next包含四个不同的主题，可以在主题配置文件里修改</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#取消要使用的主题前的注释即可</span><br><span class=\"line\"># Schemes</span><br><span class=\"line\">#scheme: Muse</span><br><span class=\"line\">#scheme: Mist</span><br><span class=\"line\">scheme: Pisces</span><br><span class=\"line\">#scheme: Gemini</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-设置菜单\"><a href=\"#3-设置菜单\" class=\"headerlink\" title=\"3.设置菜单\"></a>3.设置菜单</h3><p>包含三个部分：菜单项（名称和链接），菜单项的显示文本，菜单项对应图标</p>\n<p>设置菜单项方法：打开主题配置文件，查找<code>menu</code>,删除前面的注释<code>#</code>即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">menu:</span><br><span class=\"line\">  home: / || home                      #首页</span><br><span class=\"line\">  archives: /archives/ || archive      #归档</span><br><span class=\"line\">  categories: /categories/ || th       #分类</span><br><span class=\"line\">  tags: /tags/ || tags                 #标签</span><br><span class=\"line\">  about: /about/ || user               #关于</span><br><span class=\"line\">  #schedule: /schedule/ || calendar    #日历</span><br><span class=\"line\">  #sitemap: /sitemap.xml || sitemap    #站点地图，供搜索引擎爬取</span><br><span class=\"line\">  #commonweal: /404/ || heartbeat      #腾讯公益404</span><br></pre></td></tr></table></figure>\n\n<p>“||”前面的是目标链接，后面的是图标名称，next使用的图标全是<a href=\"http://www.fontawesome.com.cn/faicons/#web-application\">图标库 - Font Awesome 中文网</a>这一网站的，有想用的图标直接在fontawesome上面找图标的名称就行。</p>\n<p><b> <span style='color:文字颜色;background:yellow;font-size:文字大小;font-family:字体;'>**</span>如果想自定义菜单项，如想加入<span style='color:文字颜色;background:yellow;font-size:文字大小;font-family:字体;'>something</span>到菜单，需要执行一下步骤</b></p>\n<p>在主题配置文件添加something项</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">menu:</span><br><span class=\"line\">  home: / || home                      #首页</span><br><span class=\"line\">  archives: /archives/ || archive      #归档</span><br><span class=\"line\">  categories: /categories/ || th       #分类</span><br><span class=\"line\">  tags: /tags/ || tags                 #标签</span><br><span class=\"line\">  about: /about/ || user               #关于</span><br><span class=\"line\">  resources: /resources/ || download   #资源</span><br><span class=\"line\">  #schedule: /schedule/ || calendar    #日历</span><br><span class=\"line\">  #sitemap: /sitemap.xml || sitemap    #站点地图，供搜索引擎爬取</span><br><span class=\"line\">  #commonweal: /404/ || heartbeat      #腾讯公益404</span><br><span class=\"line\">  something: /目标链接/ || 图标名</span><br></pre></td></tr></table></figure>\n\n<p>为something添加中文翻译。打开<span style='background:yellow'>/themes/next/languages/zh-CN.yml</span>,修改<code>menu</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">menu:</span><br><span class=\"line\">  home: 首页</span><br><span class=\"line\">  archives: 归档</span><br><span class=\"line\">  categories: 分类</span><br><span class=\"line\">  tags: 标签</span><br><span class=\"line\">  about: 关于</span><br><span class=\"line\">  something: 有料</span><br></pre></td></tr></table></figure>\n\n<p>在根目录下打开Git Bash，输入如下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new page &quot;something&quot;</span><br></pre></td></tr></table></figure>\n\n<p>此时在根目录的sources文件夹下会生成一个something文件，文件中有一个<code>index.md</code>文件，修改内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: something</span><br><span class=\"line\">date: 2021-07-28 12:37:17</span><br><span class=\"line\">type: &quot;something&quot;</span><br><span class=\"line\">comments: false   #评论</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>菜单项的设置到此完结</p>\n<h3 id=\"4-设置头像和网站图标\"><a href=\"#4-设置头像和网站图标\" class=\"headerlink\" title=\"4.设置头像和网站图标\"></a>4.设置头像和网站图标</h3><p>打开主题配置文件，建议将图片放在/themes/next/source/images下，修改如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#查找avater,url后面是头像位置</span><br><span class=\"line\"></span><br><span class=\"line\"># Sidebar Avatar</span><br><span class=\"line\">avatar:</span><br><span class=\"line\">  # Replace the default image and set the url here.</span><br><span class=\"line\">  url: /images/avatar.gif   #图片的位置，也可以是http://xxx.com/avatar.png</span><br><span class=\"line\">  # If true, the avatar will be dispalyed in circle.</span><br><span class=\"line\">  rounded: true   #头像展示在圈里</span><br><span class=\"line\">  # If true, the avatar will be rotated with the cursor.</span><br><span class=\"line\">  rotated: false  #头像随光标旋转</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">  #修改网站图标，只修改samll和medium就行</span><br><span class=\"line\">  favicon:</span><br><span class=\"line\">  small: /images/favicon-16x16.png  #注意图片大小16X16</span><br><span class=\"line\">  medium: /images/favicon-32x32.png  #32X32</span><br><span class=\"line\">  apple_touch_icon: /images/apple-touch-icon-next.png</span><br><span class=\"line\">  safari_pinned_tab: /images/logo.svg</span><br><span class=\"line\">  #android_manifest: /images/manifest.json</span><br><span class=\"line\">  #ms_browserconfig: /images/browserconfig.xml</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-添加本地搜索\"><a href=\"#5-添加本地搜索\" class=\"headerlink\" title=\"5.添加本地搜索\"></a>5.添加本地搜索</h3><p>安装插件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-search</span><br></pre></td></tr></table></figure>\n\n<p>在站点配置文件最后加入如下代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"> # Search </span><br><span class=\"line\">search:</span><br><span class=\"line\">  path: ./public/search.xml     #索引文件的路径，相对于站点根目录</span><br><span class=\"line\">  field: post   #搜索范围，默认是 post，还可以选择 page、all，设置成 all 表示搜索所有页面</span><br><span class=\"line\">  format: html</span><br><span class=\"line\">  limit: 10000  #限制搜索条目数</span><br></pre></td></tr></table></figure>\n\n\n\n<p>修改主题配置文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">local_search:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  # If auto, trigger search by changing input.</span><br><span class=\"line\">  # If manual, trigger search by pressing enter key or search button.</span><br><span class=\"line\">  trigger: manual</span><br><span class=\"line\">  # Show top n results per article, show all results by setting to -1</span><br><span class=\"line\">  top_n_per_article: 1  #表示在每篇文章中显示的搜索结果数量，设成 -1 会显示每篇文章的所有搜索结果数量</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"记录一个错误\"><a href=\"#记录一个错误\" class=\"headerlink\" title=\"记录一个错误\"></a><span style='background:yellow'>记录一个错误</span></h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo clean </span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n\n<p>三部曲之后，在4000界面预览发现搜索功能一直在loading</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#解决办法，再次更新hexo插件服务</span><br><span class=\"line\">npm install hexo-generator-searchdb </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><a href=\"https://www.dazhuanlan.com/hfyiyue/topics/1640075\">Hexo NexT主题站内搜索功能异常</a> </p>\n</blockquote>\n<h3 id=\"6-添加cnavas-nest-3D效果-设置博文内链接为蓝色\"><a href=\"#6-添加cnavas-nest-3D效果-设置博文内链接为蓝色\" class=\"headerlink\" title=\"6.添加cnavas nest 3D效果,设置博文内链接为蓝色\"></a>6.添加cnavas nest 3D效果,设置博文内链接为蓝色</h3><blockquote>\n<p>设置方法文章顶部知乎链接</p>\n</blockquote>\n<h3 id=\"7-利用leancloud统计单篇文章阅读量，以及实现评论功能\"><a href=\"#7-利用leancloud统计单篇文章阅读量，以及实现评论功能\" class=\"headerlink\" title=\"7.利用leancloud统计单篇文章阅读量，以及实现评论功能\"></a>7.利用<span style='color:文字颜色;background:yellow;font-size:文字大小;font-family:字体;'>leancloud</span>统计单篇文章阅读量，以及实现评论功能</h3><blockquote>\n<p><a href=\"https://www.pianshen.com/article/9435262132/\">Hexo博客使用LeanCloud统计页面访问次数 - 程序员大本营</a></p>\n<p><a href=\"https://blog.garryde.com/archives/48665.html\">Hexo Next主题 使用LeanCloud统计文章阅读次数、添加热度排行页面 - 咖里De</a></p>\n</blockquote>\n<h3 id=\"8-利用不蒜子统计总访客数和总访问量\"><a href=\"#8-利用不蒜子统计总访客数和总访问量\" class=\"headerlink\" title=\"8.利用不蒜子统计总访客数和总访问量\"></a>8.利用<span style='color:文字颜色;background:yellow;font-size:文字大小;font-family:字体;'>不蒜子</span>统计总访客数和总访问量</h3><ul>\n<li>基本配置</li>\n</ul>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/qq_43751489/article/details/102990376?utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.pc_relevant_baidujshouduan&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.pc_relevant_baidujshouduan\"> hexo框架next主题统计访问人数_Xiaoweidumpb-CSDN博客</a></p>\n</blockquote>\n<ul>\n<li>hexo s后底部总访问量很大</li>\n</ul>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/qq_43751489/article/details/102990376?utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.pc_relevant_baidujshouduan&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.pc_relevant_baidujshouduan\">hexo框架next主题统计访问人数_Xiaoweidumpb-CSDN博客</a></p>\n</blockquote>\n<h3 id=\"9-文章末尾添加版权声明\"><a href=\"#9-文章末尾添加版权声明\" class=\"headerlink\" title=\"9.文章末尾添加版权声明\"></a>9.文章末尾添加版权声明</h3><p>查找<strong>主题配置文件</strong>themes/next/_config.yml中的creative_commons：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">creative_commons:</span><br><span class=\"line\">  license: by-nc-sa</span><br><span class=\"line\">  sidebar: false</span><br><span class=\"line\">  post: true  # 将false改为true即可显示版权信息</span><br><span class=\"line\">  language:</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-更换代码块背景色\"><a href=\"#10-更换代码块背景色\" class=\"headerlink\" title=\"10.更换代码块背景色\"></a>10.更换代码块背景色</h3><blockquote>\n<p><a href=\"http://theme-next.iissnan.com/theme-settings.html\">主题配置 - NexT 使用文档</a></p>\n</blockquote>\n<h3 id=\"11-高级设置\"><a href=\"#11-高级设置\" class=\"headerlink\" title=\"11.高级设置\"></a>11.高级设置</h3><p>本来想实现把文章多级嵌套分类，结果失败了，这里提供链接</p>\n<blockquote>\n<p><a href=\"https://tding.top/docs/getting-started/data-files.html\">数据文件 | 小丁的个人博客</a></p>\n</blockquote>\n<h3 id=\"12-背景图片设置\"><a href=\"#12-背景图片设置\" class=\"headerlink\" title=\"12.背景图片设置\"></a>12.背景图片设置</h3><p>我的next版本是7.8.0，网上的设置办法包含两种，一种是利用styles.styl配置文件来实现，但是因为版本更新，这个方法对我怎么也不适用，下面介绍第二种方法。</p>\n<p>确认你能找到 <code>themes\\next\\source\\css\\_common\\components\\pages\\pages.styl</code>，然后打开pages.styl,添加以下内容：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:url(/images/background.png); <span class=\"comment\">// 可以是路径也可以是链接</span></span><br><span class=\"line\">    <span class=\"attribute\">background-repeat</span>: no-repeat; <span class=\"comment\">// 不重复</span></span><br><span class=\"line\">    <span class=\"attribute\">background-attachment</span>:fixed; <span class=\"comment\">// 固定住背景图片</span></span><br><span class=\"line\">    <span class=\"attribute\">background-position</span>:<span class=\"number\">50%</span> <span class=\"number\">50%</span>; <span class=\"comment\">// 图片位置：居中</span></span><br><span class=\"line\">    <span class=\"attribute\">background-size</span>: <span class=\"number\">100%</span> <span class=\"number\">100%</span>; <span class=\"comment\">// 图片长宽扩充为100%</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>背景图片路径：<code>themes\\next\\source\\images\\background.png</code></p>\n<p>最后部署一下，就行了</p>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/louis_li51/article/details/105227430?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1.pc_relevant_baidujshouduan&spm=1001.2101.3001.4242\">(1条消息) 【主题美化系列】NexT7主题添加背景图片_kris的博客-CSDN博客</a></p>\n</blockquote>\n<h3 id=\"13-npm删除多余插件\"><a href=\"#13-npm删除多余插件\" class=\"headerlink\" title=\"13.npm删除多余插件\"></a>13.npm删除多余插件</h3><p>本来想找到一个在博文中插入图片的办法，结果按照网上的输入<code>cnpm install hexo-asset-image --save</code>后<code>hexo g</code>报错，一看根目录下的<span style='background:yellow'>node_moudles</span>文件夹下几个文件夹变成了快捷方式，果断删除这插件，命令如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cnpm uninstall hexo-asset-image</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.dazhuanlan.com/dennis-zoo/topics/995051\">卸载 hexo 插件 · 大专栏</a></p>\n<h3 id=\"14-多级菜单-多层级嵌套页面的实现\"><a href=\"#14-多级菜单-多层级嵌套页面的实现\" class=\"headerlink\" title=\"14.多级菜单/多层级嵌套页面的实现\"></a>14.多级菜单/多层级嵌套页面的实现</h3><blockquote>\n<p><a href=\"%5Bhttps://hlss-lxh.github.io/2021/08/03/hexo%E5%B5%8C%E5%A5%97%E9%A1%B5%E9%9D%A2/%5D(https://hlss-lxh.github.io/2021/08/03/hexo%E5%B5%8C%E5%A5%97%E9%A1%B5%E9%9D%A2/)\">hexo嵌套页面</a></p>\n</blockquote>\n<h3 id=\"15-hexo结合typora的插入图片的办法\"><a href=\"#15-hexo结合typora的插入图片的办法\" class=\"headerlink\" title=\"15.hexo结合typora的插入图片的办法\"></a>15.hexo结合typora的插入图片的办法</h3><blockquote>\n<p><a href=\"https://yinyoupoet.github.io/2019/09/03/hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/\">typora + hexo博客中插入图片 | yinyoupoet的博客</a></p>\n</blockquote>\n<h3 id=\"16-百度收录\"><a href=\"#16-百度收录\" class=\"headerlink\" title=\"16.百度收录\"></a>16.百度收录</h3><blockquote>\n<p><a href=\"https://yinyoupoet.github.io/2019/09/04/hexo%E5%8D%9A%E5%AE%A2%E8%BF%9B%E8%A1%8C%E7%99%BE%E5%BA%A6%E3%80%81%E8%B0%B7%E6%AD%8CSEO/#%E5%89%8D%E8%A8%80\">hexo博客进行百度、谷歌SEO | yinyoupoet的博客</a></p>\n</blockquote>\n<h3 id=\"17-代码块添加复制功能\"><a href=\"#17-代码块添加复制功能\" class=\"headerlink\" title=\"17.代码块添加复制功能\"></a>17.代码块添加复制功能</h3><p>最新的next已经内置这个功能，在主题配置文件<code>copybutton</code>作如下修改</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">copy_button:</span></span><br><span class=\"line\">    <span class=\"attr\">enable:</span> <span class=\"literal\">true</span>    <span class=\"comment\">#开启代码复制</span></span><br><span class=\"line\">    <span class=\"comment\"># Show text copy result.</span></span><br><span class=\"line\">    <span class=\"attr\">show_result:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\"># Available values: default | flat | mac</span></span><br><span class=\"line\">    <span class=\"attr\">style:</span> <span class=\"string\">mac</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"18-透明背景\"><a href=\"#18-透明背景\" class=\"headerlink\" title=\"18.透明背景\"></a>18.透明背景</h3><p>主要介绍 内容板块，菜单板块，侧边栏板块的透明度设置方法</p>\n<p>内容板块和菜单板块的设置都在 <code>themes\\next\\source\\css\\_schemes\\Pisces\\_layout.styl</code>中</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\">#两个板块分别位于两个标签下</span><br><span class=\"line\"><span class=\"selector-class\">.content-wrap</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: rgba(<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">0</span>);\t<span class=\"comment\">//内容透明度，0为透明度，可自行设置</span></span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"variable\">$border</span>-radius-inner;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"selector-class\">.header-inner</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: rgba(<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">0.2</span>);\t<span class=\"comment\">//菜单栏背景透明度</span></span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"variable\">$border</span>-radius-inner;</span><br></pre></td></tr></table></figure>\n\n<p>侧边栏板块设置在 <code>themes\\next\\source\\css\\_schemes\\Pisces\\_sidebar.styl</code></p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.sidebar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: rgba(<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">0.2</span>);\t<span class=\"comment\">//侧栏透明度</span></span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">100%</span>;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><a href=\"https://www.cnblogs.com/Mayfly-nymph/p/10622307.html\">Hexo解决页面过小问题与设置透明背景 - Hk_Mayfly - 博客园</a></p>\n</blockquote>\n<h3 id=\"19-“创建时间”等扩展颜色的修改\"><a href=\"#19-“创建时间”等扩展颜色的修改\" class=\"headerlink\" title=\"19.“创建时间”等扩展颜色的修改\"></a>19.“创建时间”等扩展颜色的修改</h3><p>在 <code>themes\\next\\source\\css\\_common\\components\\post\\post-header.styl</code>中找到 <code>.posts-expand .post-meta</code>标签，修改如下：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.posts-expand</span> <span class=\"selector-class\">.post-meta</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"variable\">$grey</span>-lighter;\t#颜色</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>themes\\next\\source\\css\\_variables\\base.styl</code>中内置了一些颜色供选择，或者可以在 <a href=\"https://tool.oschina.net/commons?type=3\">RGB颜色对照表</a>中选择，不过样式要写成 <code>#fffff</code>的形式</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Colors,next内置颜色</span></span><br><span class=\"line\"><span class=\"comment\">// colors for use across theme.</span></span><br><span class=\"line\"><span class=\"comment\">// --------------------------------------------------</span></span><br><span class=\"line\"><span class=\"variable\">$whitesmoke</span>   = <span class=\"number\">#f5f5f5</span>;</span><br><span class=\"line\"><span class=\"variable\">$gainsboro</span>    = <span class=\"number\">#eee</span>;</span><br><span class=\"line\"><span class=\"variable\">$grey</span>-lighter = <span class=\"number\">#ddd</span>;</span><br><span class=\"line\"><span class=\"variable\">$grey</span>-light   = <span class=\"number\">#ccc</span>;</span><br><span class=\"line\"><span class=\"variable\">$grey</span>         = <span class=\"number\">#bbb</span>;</span><br><span class=\"line\"><span class=\"variable\">$grey</span>-dark    = <span class=\"number\">#999</span>;</span><br><span class=\"line\"><span class=\"variable\">$grey</span>-dim     = <span class=\"number\">#666</span>;</span><br><span class=\"line\"><span class=\"variable\">$black</span>-light  = <span class=\"number\">#555</span>;</span><br><span class=\"line\"><span class=\"variable\">$black</span>-dim    = <span class=\"number\">#333</span>;</span><br><span class=\"line\"><span class=\"variable\">$black</span>-deep   = <span class=\"number\">#222</span>;</span><br><span class=\"line\"><span class=\"variable\">$red</span>          = <span class=\"number\">#ff2a2a</span>;</span><br><span class=\"line\"><span class=\"variable\">$blue</span>-bright  = <span class=\"number\">#87daff</span>;</span><br><span class=\"line\"><span class=\"variable\">$blue</span>         = <span class=\"number\">#0684bd</span>;</span><br><span class=\"line\"><span class=\"variable\">$blue</span>-deep    = <span class=\"number\">#262a30</span>;</span><br><span class=\"line\"><span class=\"variable\">$orange</span>       = <span class=\"number\">#fc6423</span>;</span><br></pre></td></tr></table></figure>\n\n<p><b>推荐阅读：</b><a href=\"\">next颜色配置方法</a></p>\n<hr>\n<blockquote>\n<p>大方向参考</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/105584373\">参考链接1：知乎</a></p>\n<p><a href=\"http://theme-next.iissnan.com/getting-started.html\">参考链接2：NexT使用文档</a></p>\n<p><a href=\"https://blog.csdn.net/qq_31279347/article/details/82427562\">参考链接3：Hexo Next主题进阶详细教程</a></p>\n</blockquote>\n","categories":["Hexo博客"],"tags":["Hexo"]},{"title":"next颜色配置方法","url":"/2021/08/04/next%E9%A2%9C%E8%89%B2%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/","content":"<p><b>前言：</b>通过F12审查网页元素，总结得出的next主题颜色配置方法，下面是我的颜色配置</p>\n<p><img src=\"/../images/next%E9%A2%9C%E8%89%B2%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/%E6%88%90%E6%9E%9C%E9%A2%84%E8%A7%88.png\" alt=\"成果预览\"></p>\n<span id=\"more\"></span>\n\n<hr>\n<h5 id=\"1-实时预览效果\"><a href=\"#1-实时预览效果\" class=\"headerlink\" title=\"1.实时预览效果\"></a>1.实时预览效果</h5><p><code>hexo s</code> ,在4000端口打开本地预览，在按下 <code>F12</code>，进入 <code>source</code>下的 <code>main.css</code>中</p>\n<p><img src=\"/../images/next%E9%A2%9C%E8%89%B2%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/F12%E5%AE%A1%E6%9F%A5.png\" alt=\"F12审查\"></p>\n<p>root标签下的就是我们要修改的颜色配置项，通过 <a href=\"https://tool.oschina.net/commons?type=3\">RGB颜色对照</a>复制想要的颜色代码，替换相应配置项的内容就可以达到实时预览效果，而不用担心本地配置文件被破坏</p>\n<h5 id=\"2-本地修改\"><a href=\"#2-本地修改\" class=\"headerlink\" title=\"2.本地修改\"></a>2.本地修改</h5><p>预览结果满意后，就可以在本地同步修改，然后部署上去啦</p>\n<p>对应修改文件的路径：<code>themes\\next\\source\\css\\_colors.styl</code></p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> &#123;</span><br><span class=\"line\">  --body-bg-<span class=\"attribute\">color</span>: <span class=\"variable\">$body</span>-bg-color;</span><br><span class=\"line\">  --<span class=\"attribute\">content</span>-bg-color: <span class=\"variable\">$content</span>-bg-color;</span><br><span class=\"line\">  --card-bg-<span class=\"attribute\">color</span>: <span class=\"variable\">$card</span>-bg-color;</span><br><span class=\"line\">  --text-<span class=\"attribute\">color</span>: <span class=\"number\">#000</span>00;\t<span class=\"comment\">//正文颜色</span></span><br><span class=\"line\">  --blockquote-<span class=\"attribute\">color</span>: <span class=\"variable\">$blockquote</span>-color;</span><br><span class=\"line\">  --link-<span class=\"attribute\">color</span>: <span class=\"number\">#0000CD</span>;\t<span class=\"comment\">//链接颜色（菜单选项，文章标题等）</span></span><br><span class=\"line\">  --link-hover-<span class=\"attribute\">color</span>: <span class=\"number\">#FF8C00</span>;\t<span class=\"comment\">//链接悬停颜色</span></span><br><span class=\"line\">  --brand-<span class=\"attribute\">color</span>: <span class=\"number\">#1E90FF</span>;\t<span class=\"comment\">//网站标题颜色</span></span><br><span class=\"line\">  --brand-hover-<span class=\"attribute\">color</span>: <span class=\"number\">#FF8C00</span>;\t<span class=\"comment\">//网站标题悬停色</span></span><br><span class=\"line\">  --table-row-odd-bg-<span class=\"attribute\">color</span>: <span class=\"variable\">$table</span>-row-odd-bg-color;</span><br><span class=\"line\">  --table-row-hover-bg-<span class=\"attribute\">color</span>: <span class=\"variable\">$table</span>-row-hover-bg-color;</span><br><span class=\"line\">  --menu-item-bg-<span class=\"attribute\">color</span>: <span class=\"number\">#E6E6FA</span>;\t<span class=\"comment\">//菜单选中背景颜色</span></span><br><span class=\"line\">  --btn-default-bg: <span class=\"number\">#FFF</span>FF;\t <span class=\"comment\">//&#x27;阅读更多&#x27;按钮背景颜色</span></span><br><span class=\"line\">  --btn-default-<span class=\"attribute\">color</span>: <span class=\"number\">#FDF5E6</span>;\t<span class=\"comment\">//‘阅读更多’文字颜色</span></span><br><span class=\"line\">  --btn-default-<span class=\"attribute\">border-color</span>: <span class=\"number\">#6495ED</span>;\t<span class=\"comment\">//&#x27;阅读更多&#x27;方框颜色</span></span><br><span class=\"line\">  --btn-default-hover-bg: <span class=\"variable\">$btn</span>-default-hover-bg;\t<span class=\"comment\">//&#x27;阅读更多&#x27;按钮背景悬停色</span></span><br><span class=\"line\">  --btn-default-hover-<span class=\"attribute\">color</span>: <span class=\"number\">#7CFC00</span>;\t<span class=\"comment\">//&#x27;阅读更多&#x27;文字悬停色</span></span><br><span class=\"line\">  --btn-default-hover-<span class=\"attribute\">border-color</span>: <span class=\"number\">#000000</span>;\t<span class=\"comment\">//&#x27;阅读更多&#x27;方框悬停色</span></span><br></pre></td></tr></table></figure>\n\n<p>希望本方法能对你有所帮助</p>\n","categories":["Hexo博客"],"tags":["Hexo"]},{"title":"windows下使用cmake+vscode实现多文件多目录编译和调试（1）","url":"/2021/08/02/windows%E4%B8%8B%E4%BD%BF%E7%94%A8cmake-vscode%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%96%87%E4%BB%B6%E5%A4%9A%E7%9B%AE%E5%BD%95%E7%BC%96%E8%AF%91%E5%92%8C%E8%B0%83%E8%AF%95/","content":"<p><b>前言</b>：CMake用来编写makefile的工具，因为win下编写c++程序习惯使用的是vscode,所以写了这篇。食用之前先确保你的cmake没有问题，vscode可以选择安装两个插件 <code>cmake</code>和 <code>cmake tools</code></p>\n<p>如果对文中cmake指令</p>\n<span id=\"more\"></span>\n\n<hr>\n<h5 id=\"1-创建示例\"><a href=\"#1-创建示例\" class=\"headerlink\" title=\"1.创建示例\"></a>1.创建示例</h5><p>这里使用一个简单示例，实现打印 <code>hello hello</code>，以及交换 <code>a = 80,b = 20</code>两个量的值。</p>\n<ul>\n<li>创建一个文件夹，在vscode中创建以下目录结构</li>\n</ul>\n<p><img src=\"/../images/windows%E4%B8%8B%E4%BD%BF%E7%94%A8cmake-vscode%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%96%87%E4%BB%B6%E5%A4%9A%E7%9B%AE%E5%BD%95%E7%BC%96%E8%AF%91%E5%92%8C%E8%B0%83%E8%AF%95/test2%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png\" alt=\"test2目录结构\"></p>\n<ul>\n<li>接下来编辑<code>main.cpp</code>的内容：</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&quot;swap.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&quot;hello.h&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">swap</span>(&amp;a, &amp;b);\t<span class=\"meta\">#swap交换函数</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;after swap: &quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">hello</span>();\t<span class=\"meta\">#hello函数输出<span class=\"meta-string\">&#x27;hello hello&#x27;</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在 <code>inc</code>文件夹中加入两个要用到的头文件 <code>swap.h</code>, <code>hello.h</code></li>\n</ul>\n<p>swap.h内容：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> *p1, <span class=\"keyword\">int</span> *p2)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>hello.h内容：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">hello</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>下面编写 <code>swap.cpp</code>和 <code>hello.cpp</code>内容</li>\n</ul>\n<p>swap.cpp</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&quot;swap.h&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> *p1, <span class=\"keyword\">int</span> *p2)</span>\\</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp = <span class=\"number\">0</span>;</span><br><span class=\"line\">    temp = *p1;</span><br><span class=\"line\">    *p1 = *p2;</span><br><span class=\"line\">    *p2 = temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>hello.cpp</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&quot;hello.h&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">hello</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;hello hello&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-g-编译验证程序正确性\"><a href=\"#2-g-编译验证程序正确性\" class=\"headerlink\" title=\"2.g++编译验证程序正确性\"></a>2.g++编译验证程序正确性</h5><p><img src=\"/../images/windows%E4%B8%8B%E4%BD%BF%E7%94%A8cmake-vscode%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%96%87%E4%BB%B6%E5%A4%9A%E7%9B%AE%E5%BD%95%E7%BC%96%E8%AF%91%E5%92%8C%E8%B0%83%E8%AF%95/%E7%A8%8B%E5%BA%8F%E9%AA%8C%E8%AF%81.png\" alt=\"程序验证\"></p>\n<p>程序没问题，继续</p>\n<h5 id=\"3-cmake使用简介\"><a href=\"#3-cmake使用简介\" class=\"headerlink\" title=\"3.cmake使用简介\"></a>3.cmake使用简介</h5><p>使用cmake生成makefile一般有 <code>内部构建</code> 和 <code>外部构建</code>两种方式，内部构建生成的文件全在根目录下，影响我们的操作，所以一般采用外部构建的方法</p>\n<p>外部构建分下面几步：</p>\n<ul>\n<li>在根目录下建立 <code>build</code>文件夹</li>\n<li>编写<code>CMakeLists.txt</code>确定构建方式</li>\n<li>执行<code>cmake</code>命令构建</li>\n<li>执行<code>mingw32-make.exe</code>生成可执行文件，如果是Linux则是<code>make</code>。注意你的mingw是32还是64，可以在你的mingw安装目录下的bin文件夹下查看</li>\n</ul>\n<p>另外注意cmake的变量是要区分大小写的，例如 <code>set(EXECUTABLE_OUTPUT_PATH ../EXE)</code>,其中set大小写均可，但是后面的变量 <code>EXECUTABLE_OUTPUT_PATH</code>却只能大写</p>\n<h5 id=\"4-实际操作\"><a href=\"#4-实际操作\" class=\"headerlink\" title=\"4.实际操作\"></a>4.实际操作</h5><p>因为是多文件多目录的基础cmake使用演示，所以需要创建3个 <code>CMakeLists.txt</code></p>\n<ul>\n<li>在根目录下创建<code>CMakeLists.txt</code>,内容如下</li>\n</ul>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#指定cmake最低版本为3.0</span></span><br><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#指定项目名称</span></span><br><span class=\"line\"><span class=\"keyword\">project</span>(swap_hello)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#包含头文件路径,这里使用相对路径</span></span><br><span class=\"line\"><span class=\"keyword\">include_directories</span>(inc)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#添加子文件夹以便于构建和编译时的搜索</span></span><br><span class=\"line\"><span class=\"keyword\">add_subdirectory</span>(swap)</span><br><span class=\"line\"><span class=\"keyword\">add_subdirectory</span>(hello)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#添加编译参数</span></span><br><span class=\"line\"><span class=\"keyword\">add_compile_options</span>(-g -Wall -std=c++<span class=\"number\">11</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#指定可执行文件生成路径,这里也是采用相对路径，是相对于外部构建文件夹build的路径</span></span><br><span class=\"line\"><span class=\"comment\">#这里指定生成在根目录下的EXE文件夹</span></span><br><span class=\"line\"><span class=\"keyword\">set</span>(EXECUTABLE_OUTPUT_PATH ../EXE)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#生成可执行文件</span></span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>(swap_hello main.cpp)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#链接库</span></span><br><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(swap_hello swap_lib hello_lib)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在swap文件夹下创建 <code>CMakeLists.txt</code></li>\n</ul>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#包含该目录下所有源文件</span></span><br><span class=\"line\"><span class=\"keyword\">aux_source_directory</span>(. swap_SRC)</span><br><span class=\"line\"><span class=\"comment\">#生成静态库</span></span><br><span class=\"line\"><span class=\"keyword\">add_library</span>(swap_lib STATIC <span class=\"variable\">$&#123;swap_SRC&#125;</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在hello文件夹下创建 <code>CMakeLists.txt</code></li>\n</ul>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#包含该目录下所有源文件</span></span><br><span class=\"line\"><span class=\"keyword\">aux_source_directory</span>(. hello_SRC)</span><br><span class=\"line\"><span class=\"comment\">#生成静态库</span></span><br><span class=\"line\"><span class=\"keyword\">add_library</span>(hello_lib STATIC <span class=\"variable\">$&#123;hello_SRC&#125;</span>)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-构建项目并编译生成可执行文件\"><a href=\"#5-构建项目并编译生成可执行文件\" class=\"headerlink\" title=\"5.构建项目并编译生成可执行文件\"></a>5.构建项目并编译生成可执行文件</h5><h6 id=\"5-1-生成build文件夹，并执行cmake进行构建\"><a href=\"#5-1-生成build文件夹，并执行cmake进行构建\" class=\"headerlink\" title=\"5.1 生成build文件夹，并执行cmake进行构建\"></a>5.1 生成build文件夹，并执行cmake进行构建</h6><ul>\n<li>如果有安装cmake插件，在根目录的CMakeLists.txt界面下，直接<code>ctrl+shift+P</code>,搜索 <code>cmake:configure</code>,确认选择<code>GDB</code>,再确认选择<code>gcc</code>,vscode会自动创建<code>build</code>文件夹以及执行<code>cmake</code>命令</li>\n</ul>\n<p><b>手动步骤</b>：</p>\n<ul>\n<li><p>在vscode终端新建build文件夹，进入build文件夹目录，执行cmake指令</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir build\t</span><br><span class=\"line\">cd ./build</span><br><span class=\"line\">cmake ..\t//这里是以根目录的CMakeLists.txt为构建对象，而它在build的上层目录（根目录）</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>成功构建之后，在根目录下会出现一个 <code>build</code>和 <code>EXE</code>文件夹，并且build文件夹下会有一个构建成功的makefile文件</p>\n<p><img src=\"/../images/windows%E4%B8%8B%E4%BD%BF%E7%94%A8cmake-vscode%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%96%87%E4%BB%B6%E5%A4%9A%E7%9B%AE%E5%BD%95%E7%BC%96%E8%AF%91%E5%92%8C%E8%B0%83%E8%AF%95/build-EXE-16281684943941.png\" alt=\"build-EXE\"></p>\n<h6 id=\"5-2-make编译\"><a href=\"#5-2-make编译\" class=\"headerlink\" title=\"5.2 make编译\"></a>5.2 make编译</h6><p>依旧在build目录下，执行 <code>mingw32-make.exe</code></p>\n<p><img src=\"/../images/windows%E4%B8%8B%E4%BD%BF%E7%94%A8cmake-vscode%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%96%87%E4%BB%B6%E5%A4%9A%E7%9B%AE%E5%BD%95%E7%BC%96%E8%AF%91%E5%92%8C%E8%B0%83%E8%AF%95/make%E7%BC%96%E8%AF%91.png\" alt=\"make编译\"></p>\n<p>成功后根目录下的EXE文件会出现我们之前定义名为 <code>swap_hello.exe</code>的可执行文件</p>\n<p>现在我们来运行验证一下          <img src=\"/../images/windows%E4%B8%8B%E4%BD%BF%E7%94%A8cmake-vscode%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%96%87%E4%BB%B6%E5%A4%9A%E7%9B%AE%E5%BD%95%E7%BC%96%E8%AF%91%E5%92%8C%E8%B0%83%E8%AF%95/%E7%A8%8B%E5%BA%8F%E9%AA%8C%E8%AF%812.png\" alt=\"程序验证2\"></p>\n<p>成功。</p>\n<h5 id=\"6-总结\"><a href=\"#6-总结\" class=\"headerlink\" title=\"6.总结\"></a>6.总结</h5><p>文中介绍了如何利用cmake构建项目，编译成功的基本方法。</p>\n<p>建议对编写CMakeLists.txt的常用变量，以及常用指令进行了解，文中仅仅代表了基本的编写方法，cmake更多的东西（如静、动态库，宏，导入外部库等）有待自己在实践中发掘</p>\n<blockquote>\n<p>我将在<a href=\"https://hlss-lxh.github.io/2021/08/05/windows%E4%B8%8B%E4%BD%BF%E7%94%A8cmake-vscode%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%96%87%E4%BB%B6%E5%A4%9A%E7%9B%AE%E5%BD%95%E7%BC%96%E8%AF%91%E5%92%8C%E8%B0%83%E8%AF%95%EF%BC%882%EF%BC%89/#more\">下一篇</a>中讲述如何基于cmake构建的项目使用vscode进行调试</p>\n</blockquote>\n","categories":["c++"],"tags":["CMake"]},{"title":"windows下使用cmake+vscode实现多文件多目录编译和调试（2）","url":"/2021/08/05/windows%E4%B8%8B%E4%BD%BF%E7%94%A8cmake-vscode%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%96%87%E4%BB%B6%E5%A4%9A%E7%9B%AE%E5%BD%95%E7%BC%96%E8%AF%91%E5%92%8C%E8%B0%83%E8%AF%95%EF%BC%882%EF%BC%89/","content":"<p><b>前言：</b><a href=\"https://hlss-lxh.github.io/2021/08/02/windows%E4%B8%8B%E4%BD%BF%E7%94%A8cmake-vscode%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%96%87%E4%BB%B6%E5%A4%9A%E7%9B%AE%E5%BD%95%E7%BC%96%E8%AF%91%E5%92%8C%E8%B0%83%E8%AF%95/#more\">上一篇</a>文章中描述了使用cmake在windows平台下编译一个项目的基本方法，这里继续在上一篇的基础是叙述如何在vscode中进行调试</p>\n<span id=\"more\"></span>\n\n<hr>\n<h5 id=\"1-开始调试\"><a href=\"#1-开始调试\" class=\"headerlink\" title=\"1.开始调试\"></a>1.开始调试</h5><p>快捷键 <code>F5</code>启动调试，此时会出现报错信息，叉掉。根目录下会出现 <code>.vscode</code>文件夹，里面包含了 <code>tasks.json</code>和 <code>launch.json</code>两个文件             <img src=\"/../images/windows%E4%B8%8B%E4%BD%BF%E7%94%A8cmake-vscode%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%96%87%E4%BB%B6%E5%A4%9A%E7%9B%AE%E5%BD%95%E7%BC%96%E8%AF%91%E5%92%8C%E8%B0%83%E8%AF%95%EF%BC%882%EF%BC%89/.vscode.png\" alt=\"vscode\"></p>\n<p>接下来主要就是对着两个文件的修改</p>\n<h5 id=\"2-修改tasks-json和launch-json\"><a href=\"#2-修改tasks-json和launch-json\" class=\"headerlink\" title=\"2.修改tasks.json和launch.json\"></a>2.修改tasks.json和launch.json</h5><p>tasks.json需要替换重写，如下</p>\n<p>当然也可以自己编写json，然后加上新建build文件夹的步骤，实现编写完CMakeLists.txt之后的一系列操作</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;version&quot;</span>: <span class=\"string\">&quot;2.0.0&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;options&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;cwd&quot;</span>: <span class=\"string\">&quot;$&#123;workspaceFolder&#125;/build/&quot;</span>   <span class=\"comment\">//进入build子目录</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">&quot;tasks&quot;</span>:[</span><br><span class=\"line\">       <span class=\"comment\">//任务一：执行cmake..</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;label&quot;</span>: <span class=\"string\">&quot;cmake&quot;</span>,  <span class=\"comment\">//定义一个标签进行标记</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span>: <span class=\"string\">&quot;shell&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;command&quot;</span>: <span class=\"string\">&quot;cmake&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;args&quot;</span>: [</span><br><span class=\"line\">                <span class=\"string\">&quot;..&quot;</span></span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">//任务二：执行mingw32-make.exe</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;label&quot;</span>: <span class=\"string\">&quot;make&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span>: <span class=\"string\">&quot;shell&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;group&quot;</span>:&#123;</span><br><span class=\"line\">                <span class=\"attr\">&quot;kind&quot;</span>:<span class=\"string\">&quot;build&quot;</span>,</span><br><span class=\"line\">                <span class=\"attr\">&quot;isDefault&quot;</span>:<span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"attr\">&quot;command&quot;</span>: <span class=\"string\">&quot;mingw32-make.exe&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;args&quot;</span>: []</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">//任务三：使前两个任务按顺序执行</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;label&quot;</span>: <span class=\"string\">&quot;build cpp project&quot;</span>,   <span class=\"comment\">//注意与launch.json中的preLaunchTask对应</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;dependsOrder&quot;</span>: <span class=\"string\">&quot;sequence&quot;</span>,     <span class=\"comment\">//按顺序执行依赖项</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;dependsOn&quot;</span>:[</span><br><span class=\"line\">                <span class=\"string\">&quot;cmake&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;make&quot;</span></span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后是launch.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;version&quot;</span>: <span class=\"string\">&quot;0.2.0&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;configurations&quot;</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;g++.exe - 生成和调试活动文件&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span>: <span class=\"string\">&quot;cppdbg&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;request&quot;</span>: <span class=\"string\">&quot;launch&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;program&quot;</span>: <span class=\"string\">&quot;$&#123;workspaceFolder&#125;\\\\EXE\\\\swap_hello.exe&quot;</span>,   <span class=\"comment\">//在CMakeLists.txt中指定的exe文件路径</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;args&quot;</span>: [],</span><br><span class=\"line\">            <span class=\"attr\">&quot;stopAtEntry&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;cwd&quot;</span>: <span class=\"string\">&quot;$&#123;workspaceFolder&#125;&quot;</span>,    <span class=\"comment\">//表示当前workspace文件夹路径，即 TEST2/</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;environment&quot;</span>: [],</span><br><span class=\"line\">            <span class=\"attr\">&quot;externalConsole&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;MIMode&quot;</span>: <span class=\"string\">&quot;gdb&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;miDebuggerPath&quot;</span>: <span class=\"string\">&quot;D:\\\\MinGW\\\\bin\\\\gdb.exe&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;setupCommands&quot;</span>: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"attr\">&quot;description&quot;</span>: <span class=\"string\">&quot;为 gdb 启用整齐打印&quot;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">&quot;text&quot;</span>: <span class=\"string\">&quot;-enable-pretty-printing&quot;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">&quot;ignoreFailures&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            <span class=\"attr\">&quot;preLaunchTask&quot;</span>: <span class=\"string\">&quot;build cpp project&quot;</span>    <span class=\"comment\">//注意与tasks.json中的任务三的label值对应</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-验证\"><a href=\"#3-验证\" class=\"headerlink\" title=\"3.验证\"></a>3.验证</h5><p>现在直接<code>F5</code>运行调试，运行结果与第一篇中手动结果一致</p>\n<p><img src=\"/../images/windows%E4%B8%8B%E4%BD%BF%E7%94%A8cmake-vscode%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%96%87%E4%BB%B6%E5%A4%9A%E7%9B%AE%E5%BD%95%E7%BC%96%E8%AF%91%E5%92%8C%E8%B0%83%E8%AF%95%EF%BC%882%EF%BC%89/%E9%AA%8C%E8%AF%81-16283069119252.png\" alt=\"验证\"></p>\n<p><img src=\"/../images/windows%E4%B8%8B%E4%BD%BF%E7%94%A8cmake-vscode%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%96%87%E4%BB%B6%E5%A4%9A%E7%9B%AE%E5%BD%95%E7%BC%96%E8%AF%91%E5%92%8C%E8%B0%83%E8%AF%95%EF%BC%882%EF%BC%89/%E7%BB%93%E6%9E%9C.png\" alt=\"结果\"></p>\n<p>这之后就可以把vscode当IDE使用了，断点调试什么的都是信手拈来</p>\n<h5 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4.总结\"></a>4.总结</h5><p>对于不明白的地方多去探索，才会有自己的理解和感悟。</p>\n<p>例如tasks.json我开始也没太明白，后来模仿别人写的，在百度和官方找解释，慢慢也就明白了</p>\n<p>总之，实践是最好的老师</p>\n<blockquote>\n<p><a href=\"https://hlss-lxh.github.io/2021/08/02/windows%E4%B8%8B%E4%BD%BF%E7%94%A8cmake-vscode%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%96%87%E4%BB%B6%E5%A4%9A%E7%9B%AE%E5%BD%95%E7%BC%96%E8%AF%91%E5%92%8C%E8%B0%83%E8%AF%95/#more\">windows下使用cmake+vscode实现多文件多目录编译和调试（1）</a></p>\n</blockquote>\n","categories":["c++"],"tags":["CMake"]},{"title":"111","url":"/2021/08/07/111/","content":""}]